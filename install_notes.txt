Before installing the geonition packages make sure that you have installed geoDjango and the required dependencies for geoDjango.

To migrate data from previous version dump the data into the data folder
with the names mentioned below. Load the files in the following way:

1. Do this before installing the new version with >>> sh install_all.sh
2. python manage.py dumpdata dashboard --all --settings="geonition.***" > ../data/dashboard.json

STEP BY STEP:
1. git clone releases from github
2. if not allready installed, install libxml2-dev and libxslt-dev
3. pip install -r requirements_snapshot.txt
4. create a settings_<site>.py file for the site you are going to use
5. add to settings_<site>.py database, admins, debug, time_zone, language_code,
languages, MEDIA_ROOT, EMAIL_BACKEND and other email settings
6. If language not in Django-base languages set LOCALE_PATHS setting
7. copy gntimages (base images) to MEDIA_ROOT
8. set SPATIAL_REFERENCE_SYSTEM_ID to the right value (e.g. 3067)
9. Write a javascript file with your analytics script for the installation
10. set ANALYTICS_TEMPLATE to the template file where you have your analytics script
11. python manage.py syncdb --settings="geonition.settings_<site>" (starting from django version 1.5 the python manage.py syncdb --no-initial-data can be used for the first run)
12. python manage.py collectstatic --settings="geonition.settings_<site>"
13. python manage.py test --settings="geonition.settings_<site>" #should pass all the tests

IMPORTANT!
Some REDHAT Linux releases are lacking correct lxml version. In that case run the following command:
CFLAGS=-fPIC STATICBUILD=true LIBXML2_VERSION=2.8.0 pip install lxml

There can be some database schema changes in this release so alway run the followin commands after syncdb.
1. python manage.py update_db --settings="geonition.settings_<site>"
2. python manage.py sync_translation_fields --settings="geonition.settings_<site>"


And now everything should be up and running.




